apiVersion: source.toolkit.fluxcd.io/v1
kind: HelmRepository
metadata:
  name: akhq
  namespace: flux-system
spec:
  interval: 1h0m0s
  url: https://raw.githubusercontent.com/tchiotludo/akhq/helm
---
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: akhq
  namespace: flux-system
spec:
  interval: 1m0s
  driftDetection:
    mode: enabled
  targetNamespace: akhq
  releaseName: akhq
  chart:
    spec:
      chart: akhq
      sourceRef:
        kind: HelmRepository
        name: akhq
        namespace: flux-system
      version: "*"
  install:
    createNamespace: true
  values:
    akhq:
      clients-defaults:
        consumer:
          properties:
            default.api.timeout.ms: 15000000
    secrets:
      akhq:
        connections:
          docker-kafka-server:
            properties:
              bootstrap.servers: eventhub-dpn-sbx-uksouth-001.servicebus.windows.net:9093
              # security.protocol: SASL_SSL
              # sasl.mechanism: PLAIN
              # sasl.jaas.config: software.amazon.msk.auth.iam.IAMLoginModule required awsDebugCreds=true;
              # sasl.client.callback.handler.class: software.amazon.msk.auth.iam.IAMClientCallbackHandler
              security.protocol: SASL_SSL
              sasl.mechanism: PLAIN
              ssl.truststore.location: /opt/java/lib/security/cacerts
              sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule required \
                username="$ConnectionString" \
                password="Endpoint=sb://eventhub-dpn-sbx-uksouth-001.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=yK+BqsHO1EKSD+Gmb9hFAO7AAXUg/J9RM+AEhFeUp+Y=";


              #only works with below commented out which is different to the docs
              # ssl.truststore.location: ${JAVA_HOME}/lib/security/cacerts
              # ssl.truststore.password: changeit
        micronaut:
          security:
            enabled: false

    kafkaSecrets: []
    #Provide extra base64 encoded kubernetes secrets (keystore/truststore)

    # Specify ServiceAccount for pod
    # serviceAccountName: null
    serviceAccount:
      create: true
      annotations:
        eks.amazonaws.com/role-arn: arn:aws:iam::${aws_act_no}:role/${cluster_name}-akhq
    # Configure the Pod Security Context
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    securityContext: {}
      # runAsNonRoot: true
      # runAsUser: 1000

    # Configure the Container Security Context
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
    containerSecurityContext:
      allowPrivilegeEscalation: false
      privileged: false
      capabilities:
        drop:
          - ALL
      runAsNonRoot: true
      runAsUser: 1001
      readOnlyRootFilesystem: false

    service:
      enabled: true
      type: ClusterIP
      port: 80
      managementPort: 28081
      #httpNodePort: 32551
      #managementNodePort: 32552
      labels: {}
      annotations:
        # cloud.google.com/load-balancer-type: "Internal"

    ingress:
      enabled: true
      ingressClassName: "alb"
      annotations:
        alb.ingress.kubernetes.io/group.name: eks-main
        alb.ingress.kubernetes.io/backend-protocol: HTTP
        # alb.ingress.kubernetes.io/group.order: '100'
        alb.ingress.kubernetes.io/healthcheck-path: "/"
        alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
        alb.ingress.kubernetes.io/inbound-cidrs: 0.0.0.0/0
        alb.ingress.kubernetes.io/ip-address-type: ipv4
        alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS":443}]'
        alb.ingress.kubernetes.io/load-balancer-attributes: routing.http.drop_invalid_header_fields.enabled=true
        # ,access_logs.s3.enabled=true,access_logs.s3.bucket=${env}-logs,access_logs.s3.prefix=alb/core-product,idle_timeout.timeout_seconds=300
        alb.ingress.kubernetes.io/scheme: internet-facing
        alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS13-1-2-2021-06
        alb.ingress.kubernetes.io/ssl-redirect: '443'
        alb.ingress.kubernetes.io/success-codes: 200,301,302
        alb.ingress.kubernetes.io/tags: env=${cluster_env},t_vpc=${cluster_env}-eks
        alb.ingress.kubernetes.io/target-type: ip
        # alb.ingress.kubernetes.io/wafv2-acl-arn: ${waf_arn}

        # alb.ingress.kubernetes.io/auth-idp-oidc: '{"Issuer":"https://keycloak-internal.com/", "AuthorizationEndpoint":"https://keycloak-internal.com/authorize","TokenEndpoint":"https://keycloak-internal.com/oauth/token","UserInfoEndpoint":"https://keycloak-internal.com/userinfo","SecretName":"auth0-alb-oidc-secret"}'
        # alb.ingress.kubernetes.io/auth-on-unauthenticated-request: authenticate
        # alb.ingress.kubernetes.io/auth-scope: email openid profile
        # alb.ingress.kubernetes.io/auth-session-timeout: '3600'
        # alb.ingress.kubernetes.io/auth-type: oidc
      paths:
        - /*
      pathType: "ImplementationSpecific"
      hosts:
        - akhq.${subdomain}${domain}
      tls: []
      #  - secretName: akhq-tls
      #    hosts:
      #      - akhq.demo.com

    resources:
      # limits:
      #  cpu: 100m
      #  memory: 128Mi
      requests:
       cpu: 100m
       memory: 128Mi

    nodeSelector: {}

    tolerations: []

    affinity: {}

    networkPolicy:
      enabled: true
